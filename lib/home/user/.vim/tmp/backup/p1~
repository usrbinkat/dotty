#!/bin/bash
#set -ex
################################################################################
# User Defined Variables
p1GitCloneBundle="https://repo1.dsop.io/dsop/redhat/platformone/ocp4x/ansible/bundle.git"
p1GitCloneDeploy="https://repo1.dsop.io/dsop/redhat/platformone/ocp4x/ansible/deploy.git"
p1GitDeployBranch='v2-govcloud-automation'

# Working Variables
p1NameVpc=""
p1NameDomain=""
p1NameCluster=""
p1ClusterDomain=""
p1DirBase="${HOME}/PlatformOne"
runAnsibleCmd="./site.yml"
################################################################################
# Base Logging 
run_log () {
  if   [[ $1 == 0 ]]; then
    echo "   $2" 
  elif [[ $1 == 1 ]]; then
    echo "   $2"
    exit 1
  fi
}

################################################################################
# Option Run Ansible Playbook
run_ansible_playbook_bundle () {
run_log 0 "Print Variables To Screen"
echo
echo
  printenv | grep p1
echo
echo
while true; do
  read -rp "    >> Would you like to build your PlatformOne.tar.gz bundle now? (yes/no): " yn
    case $yn in
      [Yy]* ) echo ;
	      run_log 0 "Executing ansible playbook ${runAnsibleCmd}" ; 
              cd /root/PlatformOne/ansible/bundle/ && ./site.yml; 
              ${runAnsibleCmd}
              break
              ;;
      [Nn]* ) run_log 0 " >> Exiting now, thank you!" ;
	      break
              ;;
          * ) echo "$SEP_2 Please answer yes or no." ;;
    esac
  break
done
echo
}
################################################################################
# Stage ansible variables
run_stage_deploy_variables () {
run_log 0 "Staging Ansible ${p1DirBase}/ansible/p1.yml variables file"
cat <<EOF > ${p1DirBase}/ansible/p1.yml
---
version_openshift: "${versOCP}"
git_branch: "${p1GitDeployBranch}"
name_domain: "${p1NameDomain}"
cluster_name: "${p1NameCluster}"
cluster_domain: "${p1ClusterDomain}"
name_cluster_vpc: "${p1NameVpc}"
cluster_network_mode: "disconnected"
target_environment: 'govcloud'
EOF
}

################################################################################
# Git Clone master ansible playbook
run_git_clone () {

run_log 0 "Git Clone Dependencies"
git clone ${p1GitCloneBundle} /root/PlatformOne/ansible/bundle 2>/dev/null

run_log 0 "Git Checkout Branch: ${p1GitDeployBranch}"
cd /root/PlatformOne/ansible/bundle
git checkout ${p1GitDeployBranch} 2>/dev/null

cd /root/PlatformOne
}

################################################################################
# Write Self Signed Certificate & Key
run_log 0 "Staging optional registry node self signed certificates"
write_self_signed_cert () {
openssl req \
  -x509 \
  -nodes \
  -sha256 \
  -days   3650 \
  -newkey rsa:4096 \
  -subj   "/CN=${p1ClusterDomain}" \
  -out    ${p1DirArtifacts}/ssl/${p1ClusterDomain}.crt  \
  -keyout ${p1DirArtifacts}/ssl/${p1ClusterDomain}.key  \
  -addext "subjectAltName=DNS:registry.${p1ClusterDomain},DNS:registry,DNS:localhos,IP:127.0.0.1" 2>&1 1>/dev/null
# -addext "subjectAltName=DNS:registry.${p1ClusterDomain},DNS:${p1NameDomain},IP:10.0.1.1" 2>&1 1>/dev/null
}

################################################################################
# Stage docker config quay pull secret
write_docker_config_json () {
# Write Quay Pull Secret
cat <<EOF > ${p1DirArtifacts}/bak/.docker/config.json
${quaySecret}
EOF

cp -f ${p1DirArtifacts}/bak/.docker/config.json /root/.docker/config.json

# Write private registry credentials
cat <<EOF > ${p1DirArtifacts}/.docker/mirror.json
{"auths": {"registry.${p1ClusterDomain}:5000": {"auth": "`echo -n ${p1NameVpc}:${p1NameVpc} | base64 -w0`","email": "admin@${p1NameDomain}"}}}
EOF

#export emailAdmin="admin@${p1NameDomain}"
jq -e ".auths += {\"registry.${p1ClusterDomain}:5000\": {\"auth\": \"$(echo -n ${p1NameVpc}:${p1NameVpc} | base64 -w0)\", \"email\": "env.emailAdmin"}}" ${p1DirArtifacts}/bak/.docker/config.json | jq -c > ${p1DirArtifacts}/.docker/master.json
}

################################################################################
# Gather Red Hat Quay Image Repository Pull Secret
prompt_usr_quay_secret () {
  echo ;
  run_log 0 "On the Cluster Manager UPI portal, find and click: 'Copy Pull Secret'"

  # Prompt user to paste secret
  quaySecret=$(read -srp "    >> Please paste your pull secret and hit 'Enter'.. (Secret is masked): " quaySecret; echo ${quaySecret})
}

################################################################################
# Request Red Hat User Access
get_rh_pull_secret () {
echo
while true; do
  read -rp "    >> Do you have a login for access.redhat.com? (yes/no): " yn
    case $yn in
      [Yy]* ) echo ;
	      run_log 0 "Go ahead and open the RH Cluster Manager Portal:" ; 
              run_log 0 "      https://cloud.redhat.com/openshift/install/metal/user-provisioned" ; 
              prompt_usr_quay_secret
              break
              ;;
      [Nn]* ) run_log 0 "Please register for a commercial or developer account and try again:" ;
              run_log 0 "      https://access.redhat.com" ; 
              run_log 0 "      https://developers.redhat.com" ;
              ;;
          * ) echo "$SEP_2 Please answer yes or no." ;;
    esac
  break
done
echo
}

################################################################################
# Write AWS GovCloud secret vars to environment variables file
write_aws_govcloud_credential_vars () {
cat <<EOF >> ${HOME}/.aws/credentials

[govcloud]
aws_access_key_id = ${AWS_SECRET_KEY}
aws_secret_access_key = ${AWS_ACCESS_KEY}
region = ${p1AwsZoneA}
EOF
}

################################################################################
# Prompt user for aws keys
usr_prompt_aws_keys () {
  run_log 0 "Click on 'Create access key'"
  # Prompt user to paste secret
  echo
  read  -rp "    >> Please copy/paste the ${1} 'Access Key ID': " access_KEYID;
  read -srp "    >> Please copy/paste the ${1} 'Secret Access Key' (Secret is masked): " access_KEYSECRET;

cat <<EOF > ${p1DirArtifacts}/.aws/${1}.credentials
; https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
[default]
aws_access_key_id = ${access_KEYID}
aws_secret_access_key = ${access_KEYSECRET}
EOF

[[ $1 == "commercial" ]] && cp -f ${p1DirArtifacts}/.aws/${1}.credentials ${HOME}/.aws/credentials
}

################################################################################
# Stage UserData
write_user_data_b64 () {
clear && echo
run_log 0 "Generating RHCOS Bastion node base64 encoded user-data"
cat <<EOF | base64 -w0 > ${p1DirArtifacts}/user-data/bastion-json.b64; echo
{"ignition":{"config":{},"security":{"tls":{}},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{"users":[{"name":"core","sshAuthorizedKeys":["$(cat ${p1DirArtifacts}/.ssh/id_rsa_${p1ClusterDomain}.pub)"]}]},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Bootstrap node base64 encoded user-data"
cat <<EOF | base64 -w0 > ${p1DirArtifacts}/user-data/bootstrap-json.b64; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${p1ClusterDomain}:8080/bootstrap.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Master node(s) base64 encoded user-data"
cat <<EOF | base64 -w0 > ${p1DirArtifacts}/user-data/master-json.b64; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${p1ClusterDomain}:8080/master.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

clear
}

################################################################################
# Stage UserData
write_user_data_json () {
clear && echo

run_log 0 "Generating RHCOS Bastion node user-data json"
cat <<EOF > ${p1DirArtifacts}/user-data/bastion.json; echo
{"ignition":{"config":{},"security":{"tls":{}},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{"users":[{"name":"core","sshAuthorizedKeys":["$(cat ${p1DirArtifacts}/.ssh/id_rsa_${p1ClusterDomain}.pub)"]}]},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Bootstrap node user-data json"
cat <<EOF > ${p1DirArtifacts}/user-data/bootstrap.json; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${p1ClusterDomain}:8080/bootstrap.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Master node(s) user-data json"
cat <<EOF > ${p1DirArtifacts}/user-data/master.json; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${p1ClusterDomain}:8080/master.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

clear
}

################################################################################
# Collect AWS Gov Cloud Credentials
get_aws_govcloud_credentials () {
clear && echo
run_log 0 "Open the Gov Cloud AWS IAM Security Credentials Portal:" ; 
run_log 0 "      https://console.amazonaws-us-gov.com/iam/home#/security_credentials" ; 

usr_prompt_aws_keys govcloud
}

################################################################################
# Collect AWS Commercial Credentials
get_aws_commercial_credentials () {
clear && echo
run_log 0 "Open the Commercial AWS IAM Security Credentials Portal:" ; 
run_log 0 "      https://console.aws.amazon.com/iam/home#/security_credentials" ; 

usr_prompt_aws_keys commercial
}

################################################################################
# Generate cloud deploy ssh keys
run_ssh_keygen () {
clear && echo
  run_log 2 "Creating new ssh keys for cluster deploy..."

  # Generate ssh keys
  ssh-keygen -b 4086 -t rsa -C "core@${p1ClusterDomain}" \
             -f ${p1DirArtifacts}/.ssh/id_rsa_${p1ClusterDomain}

  cp -f ${p1DirArtifacts}/.ssh/id_rsa_${p1ClusterDomain}* /root/.ssh/
}

################################################################################
# One Time Artifact Environment Staging
run_init_stage () {
# Create directory structure
mkdir -p ${p1DirArtifacts}/{log,auth,ssl,data,registry,user-data,mirror,repos,ansible,terraform,secrets,bak/openshift/,bak/.docker,.docker,.ssh,.aws}

export versOCP="${versOCP}"
export p1DirBase="${p1DirBase}"
export p1NameVpc="${p1NameVpc}"
export p1NameDomain="${p1NameDomain}"
export p1NameCluster="${p1NameCluster}"
export p1ClusterDomain="${p1ClusterDomain}"
export p1DirArtifacts="${p1DirArtifacts}"

# Stage environment variables
cat <<EOF > ${p1DirArtifacts}/environment
export p1DirBase="\${HOME}/PlatformOne"
export versOCP="${versOCP}"
export p1NameVpc="${p1NameVpc}"
export p1NameDomain="${p1NameDomain}"
export p1NameCluster="${p1NameCluster}"
export p1ClusterDomain="${p1ClusterDomain}"
export p1DirArtifacts="\${HOME}/PlatformOne/\${p1ClusterDomain}"
EOF

cat <<EOF > /etc/profile.d/one.env
versOCP="${versOCP}"
p1DirBase="${p1DirBase}"
p1NameVpc="${p1NameVpc}"
p1NameDomain="${p1NameDomain}"
p1NameCluster="${p1NameCluster}"
p1ClusterDomain="${p1ClusterDomain}"
p1DirArtifacts="${p1DirArtifacts}"
EOF
}

################################################################################
# One Time Artifact Environment Staging
run_init_usr_prompt () {
  # Verify Information
  prompt_verify () {
    echo " 
    Artifact Environment Variables:
      VPC Name:       ${p1NameVpc}
      Cluster Name:   ${p1NameCluster}
      Base Domain:    ${p1NameDomain}
      Cluster Domain: ${p1ClusterDomain}
    "

  while true; do
    read -p "    Please confirm these details are correct (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "User Confirmed. Continuing ..." ; 
	      break
	      ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
  }

  # Prompt user for AWS VPC Name
  prompt_p1NameVpc () {
    read -p '    
    Please enter your AWS VPC name: ' p1NameVpc
  }

  # Prompt user for AWS VPC Name
  prompt_p1NameCluster () {
  echo "    
    Please enter a cluster name which will be prepended to the Base Domain
    This is a unique and arbitrary name which will be appended as a subdomain.
      Example entry:             
        cluster
      Which would prepend to become:
        cluster.cloud.com 
        cluster.anchovy.dev"
  read -p '    Cluster Name: ' p1NameCluster
  p1ClusterDomain="${p1NameCluster}.${p1NameDomain}"
  p1DirArtifacts="${p1DirBase}/${p1ClusterDomain}"
  }

  # Prompt user for Base Domain Name
  prompt_p1NameDomain () {
  echo "    
    Please enter a base domain name for this environment
    This may be an arbitrary local only domain, or a domain you own the rights to.
      Example:             
        cloud.com
        anchovy.dev"
  read -p '    Base Domain : ' p1NameDomain ;
  }

  # Call subroutines
  sub_run () {
    clear && echo
    prompt_p1NameDomain
    prompt_p1NameCluster
    prompt_p1NameVpc
    echo && prompt_verify
  }

sub_run
}

################################################################################
# User Introduction
run_info () {
run_log 0 '
    This will walk you through preparing your AWS Gov OCP asset management
    environment required to generate your RHCOS Ignition configuration data.
    
    This walk through requires all of the following:
      1. AWS Commercial Credentials:
           @ https://console.aws.amazon.com/iam/home#/security_credentials

      2. AWS Gov Cloud Credentials:
           @ https://console.amazonaws-us-gov.com/iam/home#/security_credentials

      3. A Red Hat Developer or Subscription account:
           Developer Sign up          @ https://developers.redhat.com/register/ 
           Commercial Register/Login  @ https://access.redhat.com

      4. The UPI OpenShift Cluster Manager Portal:
            @ https://cloud.redhat.com/openshift/install/metal/user-provisioned
'
}

# Function call order
run () {
  #run_log 0 ' Welcome to the ContainerOne OpenShift Artifact Prep Utility'
  #run_info
  run_init_usr_prompt
  run_init_stage 
  run_ssh_keygen
  get_aws_commercial_credentials
  get_aws_govcloud_credentials
  write_user_data_b64 
  write_user_data_json
  get_rh_pull_secret
  write_docker_config_json 
  write_self_signed_cert
  run_git_clone
  run_stage_deploy_variables 
  run_ansible_playbook_bundle 
}

run
